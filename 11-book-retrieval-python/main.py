
'''This code was generated by Gemini advanced. No kidding!

API: https://developers.google.com/books/docs/v1/using
Getting a key: https://developers.google.com/books/docs/v1/using#APIKey
'''

import datetime
import json
import os
import platform

import requests
import sys

#import Jinja2

# Sample JSON of books
# books = [
#     {"title": "The Hitchhiker's Guide to the Galaxy", "author": "Douglas Adams"},
#     {"title": "Pride and Prejudice", "author": "Jane Austen"}
# ]

#books = YAML parse

# Replace with your actual Google Books API key
VERSION = "1.0"
BOOKS_API_KEY=os.getenv('BOOKS_API_KEY')
MAX_LIBRARY_SIZE = 50
# options
output_file_json_file = "output/rich-book-info.json"
skip_if_json_exists = True
opts_print_output = False

if BOOKS_API_KEY is None:
    print("🔑 ENV[BOOKS_API_KEY] not found: Exiting. Make sure to download an API key for a project id with 📚 Books 🐝 API enabled.", file=sys.stderr)
    exit(42)

#print(f"Key: {BOOKS_API_KEY}")

def get_book_details(title, author):
    url = f"https://www.googleapis.com/books/v1/volumes?q={title}+inauthor:{author}&key={BOOKS_API_KEY}"
    headers = requests.utils.default_headers()
    #default_agent = headers['User-Agent']
    default_agent = 'curl'
    #print(f"- default_agent: {default_agent}")
    headers.update({
        'User-Agent': default_agent + ' (' + platform.platform() + ')',
    })
    #response = requests.get(url)
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = json.loads(response.text)
        if data['totalItems'] > 0:
            book_info = data['items'][0]['volumeInfo']
            return {
                "ISBN": book_info.get('industryIdentifiers', [{"type": "ISBN_10", "identifier": "N/A"}])[0]['identifier'],
                "publication_date": book_info.get('publishedDate', "N/A"),
                "cover_image_small": book_info.get('imageLinks', {}).get('thumbnail', "N/A"),
                "cover_image": book_info.get('imageLinks', {}).get('large', "N/A"),
                "description": book_info.get('description', "N/A"),
                "pageCount": book_info.get('pageCount', "N/A"),
                "categories": book_info.get('categories', "N/A"),
                "averageRating": book_info.get('averageRating', "N/A"),
                "ratingsCount": book_info.get('ratingsCount', "N/A"),
            }
        else:
            return None
    else:
        print(f"HTTP error {response.status_code}")
        if response.status_code == 429:
            print("❌ You're hammering the server too much. Better to rest for a bit (cant get retry value sorry.)")
            exit(51)
        return None

def append_info_to_js_file():
    '''Now we have the info, we need to inject in JS file'''
    gen_script = "output/generated-script.js"
    print('append_info_to_js_file(): start')
    json_blurb = ''
    with open(output_file_json_file, 'r') as rich_file:
        json_blurb = json.load(rich_file)
        #print(json_blurb)
    with open(gen_script, 'w') as f:
        #json.dump(future_content, f)
        f.write(f"// Autogenerated by {sys.argv[0]} v{VERSION} on {datetime.datetime.now()} \n\n")
        f.write(f"// Your book data (replace with your actual data or fetch from an API)\n")
        f.write(f"const books = {json_blurb};")
        #print("const books = " + json.dumps(book_data) + ";")
        with open('templates/script-after.js', 'r') as file:
            data = file.read() # .replace('\n', '')
            f.write("\n\n\n// Ingesting now templates/script-after.js ..\n\n\n")
            f.write(data)


def load_book_and_query_api_to_get_richer_info():
    '''Takes books Title/Authors and augments them with Books API'''

    with open('sample-books.json', 'r') as file:
        loaded_books = json.load(file)

    #print(f"Books: {loaded_books}")
    # check its an array and the first element has title and author...

    future_content = []

    # Process the books in the list
    for ix, book in enumerate(loaded_books):
        details = get_book_details(book['title'], book['author'])
        if details:
            if opts_print_output:
                print(f"Book #{ix}: {book['title']} by {book['author']}")
                print(f"  ISBN: {details['ISBN']}")
                print(f"  Publication Date: {details['publication_date']}")
                print(f"  Cover Image: {details['cover_image']}") # small  also
                print(f"  Cover Image (small): {details['cover_image_small']}") # small  also
                print(f"  description: {details['description']}") # small  also
            #output_file_json.write(details)
            #future_content =
            details_with_title_and_author = details
            # piggybacking also original information..
            details_with_title_and_author['title'] = book['title']
            details_with_title_and_author['author'] = book['author']
            future_content.append(details_with_title_and_author)
            # if opts_print_output:
            #     print(details)
            #future_content[ix] = details
        else:
            print(f"Book details not found for: {book['title']} by {book['author']}")
        if ix > MAX_LIBRARY_SIZE:
            print(f"Max Size exceeded: {ix}/{MAX_LIBRARY_SIZE}")
            break

    print(f"Writing now onto file: {output_file_json_file}")
    with open(output_file_json_file, 'w') as fp:
        #parsed = json.loads(future_content)
        # print(json.dumps(future_content, indent=4))
        fp.write(json.dumps(future_content, indent=2))
        #json.dump(future_content, fp)
        #fp.write("ciao")
    print(f"future_content: {future_content}")
    exit(43)

def main():
    '''controls the whole flow'''
    try:
        output_file_size = os.stat(output_file_json_file).st_size
    except FileNotFoundError:
        # File doesnt exist
        output_file_size = -1

    # reasonable size to think there's sth in it :)
    if skip_if_json_exists and output_file_size > 100:
        print("output_file_size exists and is not empty - skipping calculation (which might tamper with API usage and get me 429s)")
    else:
        load_book_and_query_api_to_get_richer_info()
    append_info_to_js_file()


main()
