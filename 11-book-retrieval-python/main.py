
'''This code was generated by Gemini advanced. No kidding!

API: https://developers.google.com/books/docs/v1/using
Getting a key: https://developers.google.com/books/docs/v1/using#APIKey
'''

import json
import os
import platform

import requests
import sys

# Sample JSON of books
# books = [
#     {"title": "The Hitchhiker's Guide to the Galaxy", "author": "Douglas Adams"},
#     {"title": "Pride and Prejudice", "author": "Jane Austen"}
# ]

#books = YAML parse

# Replace with your actual Google Books API key
BOOKS_API_KEY=os.getenv('BOOKS_API_KEY')
MAX_LIBRARY_SIZE = 3
output_file_json_file = "output/rich-book-info.json"

if BOOKS_API_KEY is None:
    print("🔑 ENV[BOOKS_API_KEY] not found: Exiting. Make sure to download an API key for a project id with 📚 Books 🐝 API enabled.", file=sys.stderr)
    exit(42)

#print(f"Key: {BOOKS_API_KEY}")

def get_book_details(title, author):
    url = f"https://www.googleapis.com/books/v1/volumes?q={title}+inauthor:{author}&key={BOOKS_API_KEY}"
    headers = requests.utils.default_headers()
    #default_agent = headers['User-Agent']
    default_agent = 'curl'
    #print(f"- default_agent: {default_agent}")
    headers.update({
        'User-Agent': default_agent + ' (' + platform.platform() + ')',
    })
    #response = requests.get(url)
    response = requests.get(url, headers=headers)


    if response.status_code == 200:
        data = json.loads(response.text)
        if data['totalItems'] > 0:
            book_info = data['items'][0]['volumeInfo']
            return {
                "ISBN": book_info.get('industryIdentifiers', [{"type": "ISBN_10", "identifier": "N/A"}])[0]['identifier'],
                "publication_date": book_info.get('publishedDate', "N/A"),
                "cover_image_small": book_info.get('imageLinks', {}).get('thumbnail', "N/A"),
                "cover_image": book_info.get('imageLinks', {}).get('large', "N/A"),
                "description": book_info.get('description', "N/A"),
                "pageCount": book_info.get('pageCount', "N/A"),
                "categories": book_info.get('categories', "N/A"),
                "averageRating": book_info.get('averageRating', "N/A"),
                "ratingsCount": book_info.get('ratingsCount', "N/A"),
            }
        else:
            return None
    else:
        print(f"HTTP error {response.status_code}")
        if response.status_code == 429:
            print("❌ You're hammering the server too much. Better to rest for a bit (cant get retry value sorry.)")
            exit(51)
        return None


def main():
    '''describe me'''
    with open('sample-books.json', 'r') as file:
        loaded_books = json.load(file)

    #print(f"Books: {loaded_books}")
    # check its an array and the first element has title and author...


    future_content = []

    # Process the books in the list
    for ix, book in enumerate(loaded_books):
        details = get_book_details(book['title'], book['author'])
        if details:
            print(f"Book #{ix}: {book['title']} by {book['author']}")
            print(f"  ISBN: {details['ISBN']}")
            print(f"  Publication Date: {details['publication_date']}")
            print(f"  Cover Image: {details['cover_image']}") # small  also
            print(f"  Cover Image (small): {details['cover_image_small']}") # small  also
            print(f"  description: {details['description']}") # small  also
            #print(f"Details keys available: {details.keys()}")
            #output_file_json.write(details)
            #future_content = future_content.append(details)
            print(details)
            future_content[ix] = details
        else:
            print(f"Book details not found for: {book['title']} by {book['author']}")
        if ix > MAX_LIBRARY_SIZE:
            print(f"Max Size exceeded: {ix}/{MAX_LIBRARY_SIZE}")
            break

    print(f"Writing now onto file: {output_file_json_file}")
    with open(output_file_json_file, 'w') as fp:
        json.dump(future_content, fp)
        #fp.write("ciao")
    print(f"future_content: {future_content}")
    exit(43)


main()
